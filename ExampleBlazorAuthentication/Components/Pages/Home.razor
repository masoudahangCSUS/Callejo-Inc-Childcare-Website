@page "/"
@using Common.View
@using ExampleBlazorAuthentication.Service
@rendermode InteractiveServer
@inject LoginService LoginService
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<script type="text/javascript">
    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }
</script>

<h3>Login</h3>

<div>
    <label for="username">Username:</label>
    <input type="text" id="username" @bind="Username" />
</div>
<div>
    <label for="password">Password:</label>
    <input type="password" id="password" @bind="Password" />
</div>
<button @onclick="AuthenticateUser">Login</button>

@if (IsAuthenticated != null && IsAuthenticated.Value)
{
    <p>Login successful!</p>
}
else if (IsAuthenticated != null && !IsAuthenticated.Value)
{
    <p>Login failed.</p>
}

@code {
    private string Username { get; set; }
    private string Password { get; set; }
    private bool? IsAuthenticated { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        Username = "scallejo";
        Password = "SamTest";
    }

    private void AuthenticateUser()
    {

        // Call the async method and block until it completes
        APIResponse response = Task.Run(() => LoginService.LoginUser(Username, Password)).Result;

        if (response != null && response.Success)
        {
            // Create cookie options
            var options = new CookieOptions
                {
                    Expires = DateTimeOffset.UtcNow.AddHours(24), // Set your desired expiration time
                    HttpOnly = true,
                    Secure = true // Set to true if using HTTPS
                };

            // Store the Token into a cookie.  Need to use JavaScript
            JS.InvokeVoidAsync("setCookie", "AuthGUID", response.Token.ToString(), 1);
            JS.InvokeVoidAsync("setCookie", "AuthUserName", Username, 1);
            IsAuthenticated = true;
            // Redirect to the Roles component
            NavigationManager.NavigateTo("/roles");
        }
        else
        {
            Console.WriteLine("Login failed.");
            IsAuthenticated = false;
        }

    }
}
