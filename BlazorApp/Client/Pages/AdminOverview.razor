@using Microsoft.AspNetCore.Authorization
@using Common.Services.Expenses
@using BlazorApp.Client.Services
@using Common.View
@inject IExpenseService ExpenseService
@inject HolidaysVacationsService HolidaysService
@attribute [Authorize(Roles = "Admin")]

<div class="admin-overview">
    <!-- Page Title -->
    <div class="overview-header">
        <h2><strong>Overview</strong></h2>
        <p>Welcome back, Admin! Here's a summary of your childcare center's performance.</p>
    </div>

    <div class="grid">
        <!-- Total Revenue -->
        <div class="card highlight-card">
            <h5>Total Revenue</h5>
            <p class="card-value">@FormattedRevenue</p>
            <p class="card-subtext">Last Updated: @LastUpdated.ToString("MMMM dd, yyyy")</p>
        </div>

        <!-- Total Active Children -->
        <div class="card highlight-card">
            <h5>Total Active Children</h5>
            <p class="card-value">@ChildrenCount</p>
            <p class="card-subtext">Includes infants, toddlers, and preschoolers</p>
        </div>

        <!-- Holidays & Vacations -->
        <div class="card highlight-card">
            <h5>Upcoming Breaks</h5>
            @if (UpcomingHolidays.Count == 0)
            {
                <p class="card-subtext">No upcoming holidays or vacations.</p>
            }
            else
            {
                <ul>
                    @foreach (var h in UpcomingHolidays)
                    {
                        <li>
                            <strong>@h.Title</strong>: @h.StartDate.ToString("MMM dd") - @h.EndDate.ToString("MMM dd")
                        </li>
                    }
                </ul>
            }
        </div>
    </div>
</div>

@code {
    private int ChildrenCount = 0;
    private string FormattedRevenue = "$0.00";
    private DateTime LastUpdated = DateTime.Now;
    private List<HolidaysVacationView> UpcomingHolidays = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTotalRevenue();
        await LoadChildrenCount();
        await LoadUpcomingBreaks();
    }

    private async Task LoadTotalRevenue()
    {
        var count = await ExpenseService.GetChildrenCountAsync();
        var revenue = count * 1000;
        FormattedRevenue = $"${revenue:N2}";
        LastUpdated = DateTime.Now;
    }

    private async Task LoadChildrenCount()
    {
        ChildrenCount = await ExpenseService.GetChildrenCountAsync();
    }

    private async Task LoadUpcomingBreaks()
    {
        var all = await HolidaysService.GetHolidaysVacationsAsync();
        var today = DateOnly.FromDateTime(DateTime.Today);
        UpcomingHolidays = all
            .Where(h => h.EndDate >= today)
            .OrderBy(h => h.StartDate)
            .Take(3)
            .ToList();
    }
}
