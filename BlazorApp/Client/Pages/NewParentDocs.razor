@page "/NewParentDocs"
@using System.Net.Http.Json
@using BlazorApp.Client.Services
@using Common.View
@using Common.Services.User
@using Microsoft.AspNetCore.Authorization
@inject HttpClient Http
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<!-- Inline styles applied directly to the page -->
<style>
    /* Center the heading */
    h3 {
        text-align: center;
        font-size: 24px;
        font-weight: bold;
        color: #333;
        margin-bottom: 20px;
    }
 /* Styling for the main container */
    .new-parent-docs {
        max-width: 600px;
        margin: 20px auto;
        padding: 20px;
        background-color: #f9f9f9;
        border-radius: 10px;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        text-align: center;
    }
/* Style for each section inside the container */
    .new-parent-docs > div {
        margin-bottom: 20px;
        padding-bottom: 20px;
        border-bottom: 1px solid #ddd;
    }
    /* Remove spacing and border from the last section */
    .new-parent-docs > div:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }
/* File input styling */
    .file-input {
        display: block;
        margin: 10px auto;
        padding: 6px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        width: 100%;
        max-width: 300px;
        text-align: center;
    }
/* Uniform styling for all upload buttons */
    button {
        width: 100%;
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: bold;
        text-align: center;
        transition: background-color 0.3s, transform 0.1s, box-shadow 0.3s;
    }
    button:hover {
        background-color: #005a9e;
        transform: translateY(-2px);
    }
    /* Button color adjustments */
    .identify-upload-btn,
    .consent-emt-upload-btn,
    .additional-children-upload-btn,
    .parent-rights-upload-btn,
    .immunization-card-upload-btn {
        background-color: #0073C6;
        color: white;
        box-shadow: 0 4px 15px rgba(112, 49, 227, 0.3);
    }
</style>



<br>
<br>
<h3>Document Upload for Prospective Parents</h3>
<br>
<br>

<div class="new-parent-docs">
    <!-- Identification Info Section -->
    <div class="identify-info-upload">
        <label for="identify-info-upload">Identification/Emergency Contact Information</label><br>
        <InputFile OnChange="HandleIdentificationInfoFileSelected" class="file-input" />
        <button class="identify-upload-btn" @onclick="SubmitIdentificationInfo">Submit Identification Info</button><br><br>
    </div>

    <!-- Consent EMT Section -->
    <div class="consent-emt">
        <label for="consent-emt">Consent for Emergency Medical Treatment</label><br>
        <InputFile OnChange="HandleConsentEMTFileSelected" class="file-input" />
        <button class="consent-emt-upload-btn" @onclick="SubmitConsentEMT">Submit EMT Consent</button><br><br>
    </div>

    <!-- Additional Children Section -->
    <div class="additional-children">
        <label for="additional-children">Notification for Additional Children in Care</label><br>
        <InputFile OnChange="HandleAdditionalChildrenFileSelected" class="file-input" />
        <button class="additional-children-upload-btn" @onclick="SubmitAdditionalChildren">Submit Additional Children</button><br><br>
    </div>

    <!-- Parent Rights Section -->
    <div class="parent-rights-acknowledgement">
        <label for="parent-rights-acknowledgement">Acknowledgement of Notification of Parent's Rights</label><br>
        <InputFile OnChange="HandleParentRightsFileSelected" class="file-input" />
        <button class="parent-rights-upload-btn" @onclick="SubmitParentRights">Submit Parent Rights</button><br><br>
    </div>

    <!-- Immunization Card Section -->
    <div class="immunization-card">
        <label for="immunization-card">Immunization Card</label><br>
        <InputFile OnChange="HandleImmunizationCardFileSelected" class="file-input" />
        <button class="immunization-card-upload-btn" @onclick="SubmitImmunizationCard">Submit Immunization Card</button><br><br>
    </div>
</div>

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <p style="color: green">@StatusMessage</p>
}

<!--@if (LogMessages.Any())
{
    <div style="background-color: #f8f8f8; border: 1px solid #ccc; padding: 10px; margin-top: 20px;">
        <h4>Debug Log:</h4>
        @foreach (var msg in LogMessages)
        {
            <p>@msg</p>
        }
    </div>
}
-->
@code {
    private Dictionary<string, IBrowserFile?> SelectedFiles = new()
    {
        { "IdentificationInfo", null },
        { "ConsentEMT", null },
        { "AdditionalChildren", null },
        { "ParentRights", null },
        { "ImmunizationCard", null }
    };

    private string StatusMessage = string.Empty;

    private List<string> LogMessages = new List<string>();

    // Helper method to add a log entry and force UI update
    private void AddLog(string message)
    {
        LogMessages.Add(message);
        StateHasChanged();
    }

    private void HandleIdentificationInfoFileSelected(InputFileChangeEventArgs e)
    {
        HandleFileSelected("IdentificationInfo", e);
    }

    private void HandleConsentEMTFileSelected(InputFileChangeEventArgs e)
    {
        HandleFileSelected("ConsentEMT", e);
    }

    private void HandleAdditionalChildrenFileSelected(InputFileChangeEventArgs e)
    {
        HandleFileSelected("AdditionalChildren", e);
    }

    private void HandleParentRightsFileSelected(InputFileChangeEventArgs e)
    {
        HandleFileSelected("ParentRights", e);
    }

    private void HandleImmunizationCardFileSelected(InputFileChangeEventArgs e)
    {
        HandleFileSelected("ImmunizationCard", e);
    }

    private void HandleFileSelected(string documentType, InputFileChangeEventArgs e)
    {
        SelectedFiles[documentType] = e.File;
        Console.WriteLine($"Selected file: {e.File?.Name} for {documentType}");
    }

    private async Task SubmitIdentificationInfo()
    {
        await SubmitFile("IdentificationInfo");
    }

    private async Task SubmitConsentEMT()
    {
        await SubmitFile("ConsentEMT");
    }

    private async Task SubmitAdditionalChildren()
    {
        await SubmitFile("AdditionalChildren");
    }

    private async Task SubmitParentRights()
    {
        await SubmitFile("ParentRights");
    }

    private async Task SubmitImmunizationCard()
    {
        await SubmitFile("ImmunizationCard");
    }

    private async Task SubmitFile(string documentType)
    {
        AddLog($"SubmitFile triggered for: {documentType}");
        if (!SelectedFiles.TryGetValue(documentType, out var file) || file == null)
        {
            StatusMessage = $"No file selected for {documentType}.";
            AddLog(StatusMessage);
            return;
        }

        try
        {
            AddLog($"Preparing upload for file: {file.Name}");
            using var stream = file.OpenReadStream(maxAllowedSize: 10_000_000);
            var content = new MultipartFormDataContent
            {
                { new StreamContent(stream), "file", file.Name },
                { new StringContent(documentType), "documentType" }
            };

            var response = await Http.PostAsync("api/admin/file-upload", content);

            AddLog($"Response Status Code: {response.StatusCode}");
            var responseBody = await response.Content.ReadAsStringAsync();
            AddLog($"Response Body: {responseBody}");

            if (response.IsSuccessStatusCode)
            {
                StatusMessage = $"File uploaded successfully for {documentType}.";
                AddLog(StatusMessage);
                SelectedFiles[documentType] = null; // Clear after successful upload
            }
            else
            {
                StatusMessage = $"Failed to upload file for {documentType}.";
                AddLog(StatusMessage);
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error uploading file for {documentType}: {ex.Message}";
            AddLog(StatusMessage);
        }
    }
}