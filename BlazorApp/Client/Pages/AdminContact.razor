@page "/inquiry"
@using Common.Models.Data
@using Common.Services.Submit
@using Microsoft.AspNetCore.Authorization
@using BlazorApp.Client.Services
@inject ISubmitService SubmitService
@inject HttpClient Http
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@* Can't get this to work properly @attribute [Authorize(Roles = "Owner")] *@


<!-- Header Section -->
<header class="page-header">
    <h1>Inquiries</h1>
</header>

<!-- Inquiry Cards Section -->
<section class="inq-container">
    @if (inquiry.Any())
    {
        @foreach (var inq in CurrentPageInquiries)
        {
            <div class="info-card">
                <h3>@inq.Name</h3>
                <p><strong>Email:</strong> @inq.Email</p>
                <p><strong>Phone:</strong> @inq.Phone</p>
                <p><strong>Reason for Inquiry:</strong></p>
                <p class="reason-text">@inq.ReasonForInquiry</p>
                <p><strong>Received at: @inq.Datetime.ToString("yyyy-MM-dd HH:mm:ss")</strong></p>
                <button class="delete-btn" @onclick="() => DeleteInquiry(inq.guid)">Delete</button>
            </div>
        }
    }
    else
    {
        <p class="no-inquiries">No inquiries found.</p>
    }
</section>
<div class="pagination-controls">
    @if (currentPage > 1)
    {
        <button @onclick="PreviousPage">Previous</button>
    }

    <span>Page @currentPage of @totalPages</span>

    @if (currentPage < totalPages)
    {
        <button @onclick="NextPage">Next</button>
    }
</div>


@code
{
    private List<InterestedParent> inquiry = new();

    private int currentPage = 1;
    private int pageSize = 4; // Show 4 cards per page
    private int totalPages => (int)Math.Ceiling((double)inquiry.Count / pageSize);

    private IEnumerable<InterestedParent> CurrentPageInquiries =>
        inquiry.Skip((currentPage - 1) * pageSize).Take(pageSize);

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateProvider.isOwner())
        {
            await LoadInquiries();
        }
    }
    private async Task LoadInquiries()
    {
        var response = await Http.GetFromJsonAsync<List<InterestedParent>>("https://localhost:7139/api/Submit/data");

        // Sort by Datetime on frontend just in case (failsafe)
        inquiry = response?.OrderByDescending(i => i.Datetime).ToList() ?? new List<InterestedParent>();
    }
    private async Task DeleteInquiry(Guid id)
    {
        // Call the service to delete the inquiry
        var result = await SubmitService.DeleteInquiryAsync(id);

        if (result)
        {
            // Remove the inquiry from the local list if successful
            inquiry = inquiry.Where(i => i.guid != id).ToList();
        }
        else
        {
            // Handle failure (e.g., show an error message)
            Console.WriteLine("Failed to delete inquiry.");
        }
    }
    public class InterestedParent
    {
        public Guid guid { get; set; }    
        public string Name { get; set; }
        public string Email { get; set; }
        public string ReasonForInquiry { get; set; }
        public string Phone { get; set; }
        public DateTime Datetime{ get; set; }
    }


}

<style>
    .info {
        border: 1px solid #ddd;
        padding: 15px;
        margin: 15px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .delete-btn {
        background-color: #ff4d4d;
        color: white;
        border: none;
        padding: 10px;
        cursor: pointer;
        border-radius: 5px;
        align-self: flex-start;
        transition: background 0.3s;
    }

        .delete-btn:hover {
            background-color: #cc0000;
        }

    .inq_container {
        padding: 20px;
        background-color: #f0f8ff;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>
