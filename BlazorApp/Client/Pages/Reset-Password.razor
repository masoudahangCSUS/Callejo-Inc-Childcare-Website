@page "/reset-password"
@rendermode InteractiveServer
@inject NavigationManager Navigation

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

<div class="reset-password-page">
    <div class="reset-password-box">
        @if (isTokenValid)
        {
            @if (!passwordChanged)
            {
                <h1>Reset Your Password</h1>
                <p>Please enter a new password for your account.</p>
                <div class="reset-password-form">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <p style="color: red;">@errorMessage</p>
                    }
                    <div class="input-wrapper">
                        <input type="@(isPasswordVisible ? "text" : "password")" placeholder="New password" @bind="newPassword" />
                        <i class="fa @(isPasswordVisible ? "fa-eye-slash" : "fa-eye")" @onclick="TogglePasswordVisibility"></i>
                    </div>
                    <div class="input-wrapper">
                        <input type="@(isConfirmPasswordVisible ? "text" : "password")" placeholder="Confirm new password" @bind="confirmPassword" />
                        <i class="fa @(isConfirmPasswordVisible ? "fa-eye-slash" : "fa-eye")" @onclick="ToggleConfirmPasswordVisibility"></i>
                    </div>
                    <button class="reset-btn" @onclick="SubmitResetPassword">Reset Password</button>
                </div>
            }
            else
            {
                <h1>PASSWORD UPDATED</h1>
                <p>Your password has been updated!</p>
                <a class="login-btn" href="/login">Login</a>
            }
        }
        else
        {
            <p>The reset link is invalid or has expired.</p>
        }
    </div>
</div>

@code {

    [Parameter] public string Token { get; set; }
    private bool isTokenValid = false;
    private string newPassword;
    private string confirmPassword;
    private string errorMessage;
    private bool passwordChanged = false;

    private bool isPasswordVisible = false;
    private bool isConfirmPasswordVisible = false;

    protected override void OnInitialized()
    {
        // validate the token by making an API call to the server
        var uri = new Uri(Navigation.Uri);
        var queryParams = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("token", out var token))
        {
            Token = token;
            ValidateToken(Token);
        }
    }

    private async Task SubmitResetPassword()
    {
        errorMessage = "";
        if (string.IsNullOrEmpty(newPassword) && string.IsNullOrEmpty(confirmPassword))
        {
            errorMessage = "Both fields are required";
            return;
        }
        if (string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            errorMessage = "Fields cannot be empty or contain only spaces.";
            return;
        }
        if (newPassword.Contains(" "))
        {
            errorMessage = "New password cannot contain spaces.";
            return;
        }
        if (newPassword != confirmPassword)
        {
            errorMessage = "Passwords do not match";
            return;
        }
        passwordChanged = true;
    }

    private async Task ValidateToken(string token)
    {
        // make API call to validate the token
        if (token == "123")
        {
            isTokenValid = true;
        }
        else
        {
            isTokenValid = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        isConfirmPasswordVisible = !isConfirmPasswordVisible;
    }

}