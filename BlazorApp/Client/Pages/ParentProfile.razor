@page "/profile"

@using System.ComponentModel.DataAnnotations
@using System.Linq
@using BlazorApp.Client.Services
@using Microsoft.AspNetCore.Components.Forms
@using Common.View
@using Common.Services.User
@using Microsoft.AspNetCore.Authorization
@using System.Text.RegularExpressions
@using Common.Services.Invoice

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IUserService userService
@inject IJSRuntime JS
@inject IInvoiceService invoiceService
@inject UserSessionService UserSession
@inject ProfileService profileService
@rendermode InteractiveServer

@attribute [Authorize(Roles = "User")]

@if (userViewDTO == null || emergencyDTO == null)
{
    <p>Loading profile...</p>
}
else
{
    <div class="parent-profile-page">
        <!-- Read-only profile display -->
        <div class="profile-overview">
            <div class="profile-photo-container">
                <img src="images/parent-placeholder.png" alt="Parent photo" class="profile-photo" />
            </div>
            <div class="profile-details-box">
                <div class="profile-details">
                    <div class="profile-info">
                        <div class="profile-column">
                            <p><strong>First Name:</strong> @userViewDTO.FirstName</p>
                            <p><strong>Last Name:</strong> @userViewDTO.LastName</p>
                            <p><strong>Email Address:</strong> @userViewDTO.Email</p>
                            <p>
                                <strong>Primary Phone Number:</strong>
                                (@userViewDTO.PrimaryPhoneNumber.AreaCode)
                                @userViewDTO.PrimaryPhoneNumber.Prefix -
                                @userViewDTO.PrimaryPhoneNumber.LastFour
                            </p>
                            <p>
                                <strong>Secondary Phone Number:</strong>
                                @if (userViewDTO.SecondaryPhoneNumber != null)
                                {
                                    @($"({userViewDTO.SecondaryPhoneNumber.AreaCode}) {userViewDTO.SecondaryPhoneNumber.Prefix} - {userViewDTO.SecondaryPhoneNumber.LastFour}")
                                }
                                else
                                {
                                    <em>None</em>
                                }
                            </p>
                        </div>
                        <div class="profile-column">
                            <p><strong>Street Address:</strong> @userViewDTO.Address</p>
                            <p><strong>City:</strong> @userViewDTO.City</p>
                            <p><strong>State:</strong> @userViewDTO.State</p>
                            <p><strong>ZIP:</strong> @userViewDTO.ZipCode</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Emergency Contact Section -->
        <div class="emergency-contact-section">
            <h2>Emergency Contact</h2>
            <div class="emergency-details-box">
                <div class="emergency-details">
                    <div class="emergency-info">
                        <div class="emergency-column">
                            <p><strong>First Name:</strong> @emergencyDTO.FirstName</p>
                            <p><strong>Last Name:</strong> @emergencyDTO.LastName</p>
                            <p>
                                <strong>Primary Phone Number:</strong>
                                (@emergencyDTO.PrimaryPhoneNumber.AreaCode)
                                @emergencyDTO.PrimaryPhoneNumber.Prefix -
                                @emergencyDTO.PrimaryPhoneNumber.LastFour
                            </p>
                            <p>
                                <strong>Secondary Phone Number:</strong>
                                @if (emergencyDTO.SecondaryPhoneNumber != null)
                                {
                                    @($"({emergencyDTO.SecondaryPhoneNumber.AreaCode}) {emergencyDTO.SecondaryPhoneNumber.Prefix} - {emergencyDTO.SecondaryPhoneNumber.LastFour}")
                                }
                                else
                                {
                                    <em>None</em>
                                }
                            </p>
                            <p><strong>Relationship to Child:</strong> @emergencyDTO.Relationship</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="button-group">
            <button class="btn-edit" @onclick="ShowEditProfileCard">Edit Profile</button>
            <button class="btn-regupload" @onclick="ShowFileUploadDialog">Upload Registration</button>
            <button class="btn-regupload" @onclick="Navigate">Registration Status</button>
        </div>
    </div>
}

@if (showEditCard)
{
    <!-- Wrap both the Profile and Emergency Contact edits in one EditForm -->
    <EditForm Model="editModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card-carousel">
            @if (currentCardIndex == 0)
            {
                <div class="card">
                    <h3>Edit Profile</h3>
                    <div class="form-group">
                        <label>First Name:</label>
                        <InputText @bind-Value="editModel.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => editModel.FirstName)" />
                    </div>
                    <div class="form-group">
                        <label>Middle Name:</label>
                        <InputText @bind-Value="editModel.MiddleName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>Last Name:</label>
                        <InputText @bind-Value="editModel.LastName" class="form-control" />
                        <ValidationMessage For="@(() => editModel.LastName)" />
                    </div>
                    <div class="form-group">
                        <label>Email:</label>
                        <InputText @bind-Value="editModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => editModel.Email)" />
                    </div>
                    <div class="form-group">
                        <label>Primary Phone Number:</label>
                        <InputText @bind-Value="editModel.PrimaryPhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => editModel.PrimaryPhoneNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Secondary Phone Number:</label>
                        <InputText @bind-Value="editModel.SecondaryPhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => editModel.SecondaryPhoneNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Street Address:</label>
                        <InputText @bind-Value="editModel.Address" class="form-control" />
                        <ValidationMessage For="@(() => editModel.Address)" />
                    </div>
                    <div class="form-group">
                        <label>City:</label>
                        <InputText @bind-Value="editModel.City" class="form-control" />
                        <ValidationMessage For="@(() => editModel.City)" />
                    </div>
                    <div class="form-group">
                        <label>State:</label>
                        <InputText @bind-Value="editModel.State" class="form-control" />
                        <ValidationMessage For="@(() => editModel.State)" />
                    </div>
                    <div class="form-group">
                        <label>ZIP:</label>
                        <InputText @bind-Value="editModel.ZipCode" class="form-control" />
                        <ValidationMessage For="@(() => editModel.ZipCode)" />
                    </div>
                </div>
            }
            else if (currentCardIndex == 1)
            {
                <div class="card">
                    <h3>Emergency Contact</h3>
                    <div class="form-group">
                        <label>First Name:</label>
                        <InputText @bind-Value="editModel.EmergencyFirstName" class="form-control" />
                        <ValidationMessage For="@(() => editModel.EmergencyFirstName)" />
                    </div>
                    <div class="form-group">
                        <label>Last Name:</label>
                        <InputText @bind-Value="editModel.EmergencyLastName" class="form-control" />
                        <ValidationMessage For="@(() => editModel.EmergencyLastName)" />
                    </div>
                    <div class="form-group">
                        <label>Primary Phone Number:</label>
                        <InputText @bind-Value="editModel.EmergencyPrimaryPhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => editModel.EmergencyPrimaryPhoneNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Secondary Phone Number:</label>
                        <InputText @bind-Value="editModel.EmergencySecondaryPhoneNumber" class="form-control" />
                        <ValidationMessage For="@(() => editModel.EmergencySecondaryPhoneNumber)" />
                    </div>
                    <div class="form-group">
                        <label>Relation To Child:</label>
                        <InputText @bind-Value="editModel.EmergencyRelationship" class="form-control" />
                        <ValidationMessage For="@(() => editModel.EmergencyRelationship)" />
                    </div>
                </div>
            }
            <div class="card-footer">
                <button @onclick="PreviousCard" type="button" class="btn-arrow">←</button>
                <button @onclick="NextCard" type="button" class="btn-arrow">→</button>
            </div>
            <div class="button-group">
                <button type="submit" class="btn-save">Save</button>
                <button type="button" class="btn-cancel" @onclick="HideCards">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@if (showUploadDialog)
{
    <div>
        <InputFile OnChange="HandleFileSelected" />
        <button class="btn-upload" @onclick="UploadFile">Upload</button>
        <button class="btn-cancel" @onclick="CancelUpload">Cancel</button>
    </div>
}

@code {
    // Edit model used for both profile and emergency contact editing
    public class ParentProfileEditModel
    {
        [Required(ErrorMessage = "First Name is required")]
        public string FirstName { get; set; }
        public string MiddleName { get; set; } = "";
        [Required(ErrorMessage = "Last Name is required")]
        public string LastName { get; set; }
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Street Address is required")]
        public string Address { get; set; }
        [Required(ErrorMessage = "City is required")]
        public string City { get; set; }
        [Required(ErrorMessage = "State is required")]
        public string State { get; set; }
        [Required(ErrorMessage = "ZIP code is required")]
        public string ZipCode { get; set; }
        [Required(ErrorMessage = "Primary phone number is required")]
        [PhoneNumberValidation(ErrorMessage = "Invalid phone number format")]
        public string PrimaryPhoneNumber { get; set; }
        [PhoneNumberValidation(AllowEmpty = true, ErrorMessage = "Invalid phone number format")]
        public string SecondaryPhoneNumber { get; set; } = "";
        // Emergency Contact Fields
        [Required(ErrorMessage = "Emergency contact first name is required")]
        public string EmergencyFirstName { get; set; }
        [Required(ErrorMessage = "Emergency contact last name is required")]
        public string EmergencyLastName { get; set; }
        [Required(ErrorMessage = "Relationship is required")]
        public string EmergencyRelationship { get; set; }
        [Required(ErrorMessage = "Emergency primary phone number is required")]
        [PhoneNumberValidation(ErrorMessage = "Invalid phone number format")]
        public string EmergencyPrimaryPhoneNumber { get; set; }
        [PhoneNumberValidation(AllowEmpty = true, ErrorMessage = "Invalid phone number format")]
        public string EmergencySecondaryPhoneNumber { get; set; } = "";
    }

    // Custom validation attribute for phone number formatting.
    public class PhoneNumberValidationAttribute : ValidationAttribute
    {
        public bool AllowEmpty { get; set; } = false;

        protected override ValidationResult IsValid(object value, ValidationContext validationContext)
        {
            var phoneStr = value as string;
            if (string.IsNullOrWhiteSpace(phoneStr))
            {
                if (AllowEmpty)
                    return ValidationResult.Success;
                return new ValidationResult("This field is required.");
            }
            string digits = Regex.Replace(phoneStr, @"\D", "");
            if (digits.Length < 10)
            {
                return new ValidationResult("Invalid phone number format");
            }
            return ValidationResult.Success;
        }
    }

    private CustomerUserViewDTO? userViewDTO;
    private EmergencyContactDTO? emergencyDTO;
    private ParentProfileEditModel editModel = new ParentProfileEditModel();
    private bool showEditCard = false;
    private int currentCardIndex = 0;
    private bool showUploadDialog = false;
    private IBrowserFile? selectedFile;
    private bool showInvoiceReminder = false;
    private bool hasRenderedReminder = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(100);
            if (showInvoiceReminder && !hasRenderedReminder)
            {
                hasRenderedReminder = true;
                await JS.InvokeVoidAsync("alert", "Reminder: You have a pending invoice due. Please pay in person.");
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUserView();
    }

    private async Task ShowEditProfileCard()
    {
        if (userViewDTO != null && emergencyDTO != null)
        {
            editModel.FirstName = userViewDTO.FirstName;
            editModel.MiddleName = userViewDTO.MiddleName ?? "";
            editModel.LastName = userViewDTO.LastName;
            editModel.Email = userViewDTO.Email;
            editModel.Address = userViewDTO.Address;
            editModel.City = userViewDTO.City;
            editModel.State = userViewDTO.State;
            editModel.ZipCode = userViewDTO.ZipCode;
            editModel.PrimaryPhoneNumber = profileService.numberToString(userViewDTO.PrimaryPhoneNumber);
            editModel.SecondaryPhoneNumber = userViewDTO.SecondaryPhoneNumber != null
                ? profileService.numberToString(userViewDTO.SecondaryPhoneNumber)
                : "";
            editModel.EmergencyFirstName = emergencyDTO.FirstName;
            editModel.EmergencyLastName = emergencyDTO.LastName;
            editModel.EmergencyRelationship = emergencyDTO.Relationship;
            editModel.EmergencyPrimaryPhoneNumber = profileService.numberToString(emergencyDTO.PrimaryPhoneNumber);
            editModel.EmergencySecondaryPhoneNumber = emergencyDTO.SecondaryPhoneNumber != null
                ? profileService.numberToString(emergencyDTO.SecondaryPhoneNumber)
                : "";
        }
        showEditCard = true;
    }

    private void ShowFileUploadDialog()
    {
        showUploadDialog = true;
    }

    private async Task HandleValidSubmit()
    {
        // Decode phone numbers.
        var decodedUserPrimary = profileService.PhoneNumberDecode(editModel.PrimaryPhoneNumber);
        var decodedEmergencyPrimary = profileService.PhoneNumberDecode(editModel.EmergencyPrimaryPhoneNumber);
        var decodedUserSecondary = string.IsNullOrWhiteSpace(editModel.SecondaryPhoneNumber)
            ? ((string AreaCode, string Prefix, string LastFour)?)null
            : profileService.PhoneNumberDecode(editModel.SecondaryPhoneNumber);
        var decodedEmergencySecondary = string.IsNullOrWhiteSpace(editModel.EmergencySecondaryPhoneNumber)
            ? ((string AreaCode, string Prefix, string LastFour)?)null
            : profileService.PhoneNumberDecode(editModel.EmergencySecondaryPhoneNumber);

        // Update the user DTO.
        userViewDTO.FirstName = editModel.FirstName;
        userViewDTO.MiddleName = editModel.MiddleName;
        userViewDTO.LastName = editModel.LastName;
        userViewDTO.Email = editModel.Email;
        userViewDTO.Address = editModel.Address;
        userViewDTO.City = editModel.City;
        userViewDTO.State = editModel.State;
        userViewDTO.ZipCode = editModel.ZipCode;
        userViewDTO.PrimaryPhoneNumber = new PhoneNumberDTO
            {
                Id = userViewDTO.PrimaryPhoneNumber.Id,
                AreaCode = decodedUserPrimary.AreaCode,
                Prefix = decodedUserPrimary.Prefix,
                LastFour = decodedUserPrimary.LastFour,
                Type = userViewDTO.PrimaryPhoneNumber.Type,
                Fk_users = userViewDTO.PrimaryPhoneNumber.Fk_users
            };
        userViewDTO.SecondaryPhoneNumber = decodedUserSecondary != null
            ? new PhoneNumberDTO
                {
                    Id = userViewDTO.SecondaryPhoneNumber?.Id ?? 0,
                    AreaCode = decodedUserSecondary.Value.AreaCode,
                    Prefix = decodedUserSecondary.Value.Prefix,
                    LastFour = decodedUserSecondary.Value.LastFour,
                    Type = userViewDTO.SecondaryPhoneNumber?.Type ?? 0,
                    Fk_users = userViewDTO.SecondaryPhoneNumber?.Fk_users ?? Guid.Empty
                }
            : null;

        // Update the emergency DTO.
        emergencyDTO.FirstName = editModel.EmergencyFirstName;
        emergencyDTO.LastName = editModel.EmergencyLastName;
        emergencyDTO.Relationship = editModel.EmergencyRelationship;
        emergencyDTO.PrimaryPhoneNumber = new PhoneNumberDTO
            {
                Id = emergencyDTO.PrimaryPhoneNumber.Id,
                AreaCode = decodedEmergencyPrimary.AreaCode,
                Prefix = decodedEmergencyPrimary.Prefix,
                LastFour = decodedEmergencyPrimary.LastFour,
                Type = emergencyDTO.PrimaryPhoneNumber.Type,
                Fk_users = emergencyDTO.PrimaryPhoneNumber.Fk_users
            };
        emergencyDTO.SecondaryPhoneNumber = decodedEmergencySecondary != null
            ? new PhoneNumberDTO
                {
                    Id = emergencyDTO.SecondaryPhoneNumber?.Id ?? 0,
                    AreaCode = decodedEmergencySecondary.Value.AreaCode,
                    Prefix = decodedEmergencySecondary.Value.Prefix,
                    LastFour = decodedEmergencySecondary.Value.LastFour,
                    Type = emergencyDTO.SecondaryPhoneNumber?.Type ?? 0,
                    Fk_users = emergencyDTO.SecondaryPhoneNumber?.Fk_users ?? Guid.Empty
                }
            : null;

        bool userUpdateStatus = await profileService.UpdateUserProfileAsync(UserSession.UserId, userViewDTO);
        bool emergencyUpdateStatus = await profileService.UpdateEmergencyContactAsync(UserSession.UserId, emergencyDTO);

        if (!userUpdateStatus)
            Console.WriteLine("User update failed");
        else
            Console.WriteLine("User update successful");

        if (!emergencyUpdateStatus)
            Console.WriteLine("Emergency contact update failed");
        else
            Console.WriteLine("Emergency contact update successful");

        HideCards();
        await GetUserView();
        StateHasChanged();
    }

    private void HideCards()
    {
        currentCardIndex = 0;
        showEditCard = false;
    }

    private void NextCard()
    {
        currentCardIndex = (currentCardIndex + 1) % 2;
    }

    private void PreviousCard()
    {
        currentCardIndex = (currentCardIndex - 1 + 2) % 2;
    }

    async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    async Task UploadFile()
    {
        if (selectedFile is not null)
        {
            using var stream = selectedFile.OpenReadStream(maxAllowedSize: 5242880);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            byte[] fileData = memoryStream.ToArray();

            var content = new MultipartFormDataContent();
            var fileContent = new ByteArrayContent(fileData);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/pdf");
            content.Add(fileContent, "file", selectedFile.Name);

            string apiUrl = $"https://localhost:7139/api/Registration/Upload?userId={UserSession.UserId}";
            var response = await Http.PostAsync(apiUrl, content);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("File uploaded successfully");
            }
            else
            {
                Console.WriteLine("File upload failed");
            }

            showUploadDialog = false;
        }
    }

    void CancelUpload()
    {
        showUploadDialog = false;
    }

    async Task GetUserView()
    {
        // Retrieve the user and related phone numbers using DTO endpoints.
        var user = await profileService.GetUserByID(UserSession.UserId);
        var PrimaryPhoneNumber = await profileService.GetPhoneNumberAsync(UserSession.UserId, 1);
        var SecondaryPhoneNumber = await profileService.GetPhoneNumberAsync(UserSession.UserId, 2);

        userViewDTO = new CustomerUserViewDTO
            {
                FirstName = user.FirstName,
                MiddleName = user.MiddleName,
                LastName = user.LastName,
                Email = user.Email,
                Address = user.Address,
                City = user.City,
                State = user.State,
                ZipCode = user.ZipCode,
                PrimaryPhoneNumber = new PhoneNumberDTO
                {
                    Id = PrimaryPhoneNumber.Id,
                    AreaCode = PrimaryPhoneNumber.AreaCode,
                    Prefix = PrimaryPhoneNumber.Prefix,
                    LastFour = PrimaryPhoneNumber.LastFour,
                    Fk_users = PrimaryPhoneNumber.Fk_users,
                    Type = PrimaryPhoneNumber.Type
                },
                SecondaryPhoneNumber = SecondaryPhoneNumber != null ? new PhoneNumberDTO
                {
                    Id = SecondaryPhoneNumber.Id,
                    AreaCode = SecondaryPhoneNumber.AreaCode,
                    Prefix = SecondaryPhoneNumber.Prefix,
                    LastFour = SecondaryPhoneNumber.LastFour,
                    Fk_users = SecondaryPhoneNumber.Fk_users,
                    Type = SecondaryPhoneNumber.Type
                } : null,
            };

        var emergencyContact = await profileService.GetEmergencyContactAsync(UserSession.UserId);
        var EmergencyPrimary = await profileService.GetPhoneNumberAsync(UserSession.UserId, 3);
        var EmergencySecondary = await profileService.GetPhoneNumberAsync(UserSession.UserId, 4);

        emergencyDTO = new EmergencyContactDTO
            {
                FirstName = emergencyContact.FirstName,
                LastName = emergencyContact.LastName,
                Relationship = emergencyContact.Relationship,
                PrimaryPhoneNumber = new PhoneNumberDTO
                {
                    Id = EmergencyPrimary.Id,
                    AreaCode = EmergencyPrimary.AreaCode,
                    Prefix = EmergencyPrimary.Prefix,
                    LastFour = EmergencyPrimary.LastFour,
                    Fk_users = EmergencyPrimary.Fk_users,
                    Type = EmergencyPrimary.Type
                },
                SecondaryPhoneNumber = EmergencySecondary != null ? new PhoneNumberDTO
                {
                    Id = EmergencySecondary.Id,
                    AreaCode = EmergencySecondary.AreaCode,
                    Prefix = EmergencySecondary.Prefix,
                    LastFour = EmergencySecondary.LastFour,
                    Fk_users = EmergencySecondary.Fk_users,
                    Type = EmergencySecondary.Type
                } : null
            };

        // Check for pending invoices
        var invoices = await profileService.GetInvoicesByGuardianId(UserSession.UserId.Value);
        if (invoices.Any(i => i.Status == "Pending" || i.Status == "Overdue"))
        {
            showInvoiceReminder = true;
        }

        StateHasChanged();
    }

    void Navigate()
    {
        Navigation.NavigateTo("/parent_status");
    }
}
