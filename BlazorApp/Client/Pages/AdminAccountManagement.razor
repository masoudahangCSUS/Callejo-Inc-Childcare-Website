@using Common.View
@using Microsoft.AspNetCore.Authorization

@inject AdminService AdminService
@inject HttpClient Http
@inject IJSRuntime JS
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]

<div class="admin-account-container">
    <!-- Main Title -->
    <div class="account-title">
        <h1>Accounts</h1>
    </div>

    <!-- Header -->
    <div class="account-header">
        <h2>Users</h2>
        <button class="add-btn" @onclick="() => AddUser()">Add User</button>
    </div>

    @if (users == null)
    {
        <p class="loading-text">Loading data...</p>
    }
    else if (users.Count == 0)
    {
        <p class="no-data-text">No users found.</p>
    }
    else
    {
        <table class="account-table">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>ZIP</th>
                    <th>Registration</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>@user.FirstName</td>
                        <td>@user.LastName</td>
                        <td>@user.Address</td>
                        <td>@user.City</td>
                        <td>@user.ZipCode</td>
                        <td>
                            @if (user.RegistrationDocument != null)
                            {
                                <button class="download-btn" @onclick="() => DownloadFile(user.Id, user.FirstName, user.LastName)">Download</button>
                                <button class="delete-btn" @onclick="() => DeleteFile(user.Id)">Delete</button>
                            }
                            else
                            {
                                <InputFile OnChange="e => HandleFileSelected(e, user.Id)" class="input-file" />
                                <button class="upload-btn" @onclick="() => UploadFile(user.Id)">Upload</button>
                            }
                        </td>
                        <td>
                            <button class="edit-btn" @onclick="() => EditUser(user)">Edit</button>
                            <button class="delete-btn" @onclick="() => ConfirmDeleteUser(user.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <!-- Modal -->
    <Modal Title="@GetModalTitle()" IsVisible="@isProfileModalVisible" OnClose="CloseProfileModal">
        <ProfileForm OnUserCreated="LoadUsers" OnSuccess="CloseProfileModal" Mode="@formMode" ExistingUser="@selectedUser" />
    </Modal>
</div>

@code {
    private List<AdminUserCreationDTO> users;
    private bool isProfileModalVisible = false;
    private FormMode formMode;
    private AdminUserCreationDTO? selectedUser;

    private string GetModalTitle()
    {
        return formMode == FormMode.Create ? "Create Profile" : "Edit Profile";
    }

    public async Task ConfirmDeleteUser(Guid userId)
    {
        bool isConfirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");

        if (isConfirmed)
        {
            try
            {
                HttpResponseMessage response = await Http.DeleteAsync($"api/admin/delete-user?userId={userId}");

                if (response.IsSuccessStatusCode)
                {
                    // User deleted successfully, refresh the user list or show a message
                    Console.WriteLine("User deleted successfully.");
                    await LoadUsers(); // Refresh the user list
                }
                else
                {
                    Console.WriteLine($"Failed to delete user: {response.ReasonPhrase}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting user: {ex.Message}");
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await AdminService.GetAllUsersAsync();
        StateHasChanged();
    }

    private void ShowProfileModal()
    {
        isProfileModalVisible = true;
    }

    private void CloseProfileModal()
    {
        isProfileModalVisible = false;
        selectedUser = null;
    }

    public async void EditUser(AdminUserCreationDTO user)
    {
        selectedUser = user;
        formMode = FormMode.Edit;
        ShowProfileModal();
    }

    public void AddUser()
    {
        selectedUser = null;
        formMode = FormMode.Create;
        ShowProfileModal();
    }



    // Download registration file
    private bool isJsLoaded = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isJsLoaded)
        {
            // Dynamically start RegDownloadHelper.js
            await JS.InvokeVoidAsync("eval", @"
                window.downloadFile = (fileName, byteBase64) => {
                    const link = document.createElement('a');
                    link.href = 'data:application/pdf;base64,' + byteBase64;
                    link.download = fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
            ");
            isJsLoaded = true;
        }
    }

    async Task DownloadFile(Guid userId, string first, string last)
    {
        var response = await Http.GetAsync($"https://localhost:7139/api/Registration/Download?userId={userId}");

        if (response.IsSuccessStatusCode)
        {
            var fileData = await response.Content.ReadAsByteArrayAsync();
            var base64File = Convert.ToBase64String(fileData);
            var fileName = $"{first}_{last}_registration.pdf";

            await JS.InvokeVoidAsync("downloadFile", fileName, base64File);
        }
        else
        {
            Console.WriteLine("[Blazor] File not found or could not be downloaded");
        }
    }

    // Delete registration file
    async Task DeleteFile(Guid userId)
    {
        var response = await Http.DeleteAsync($"https://localhost:7139/api/Registration/Delete?userId={userId}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("[Blazor] File deleted successfully");
            await LoadUsers();  // Refresh list
        }
        else
        {
            Console.WriteLine("[Blazor] File deletion failed");
        }
    }

    // Upload registration file
    private IBrowserFile? selectedFile;
    private Dictionary<Guid, IBrowserFile> fileUploads = new();

    void HandleFileSelected(InputFileChangeEventArgs e, Guid userId)
    {
        fileUploads[userId] = e.File;
    }

    async Task UploadFile(Guid userId)
    {
        if (!fileUploads.ContainsKey(userId))
        {
            Console.WriteLine("[Blazor] No file selected.");
            return;
        }

        // Retrieve selected file and confirm size is within 5MB requirement
        var selectedFile = fileUploads[userId];
        const long maxFileSize = 5242880; // 5MB
        if (selectedFile.Size > maxFileSize)
        {
            Console.WriteLine($"[Blazor] File size exceeds 5MB limit. File's size: {selectedFile.Size} bytes");
            return;
        }

        // Convert file into byte array
        using var stream = selectedFile.OpenReadStream(maxAllowedSize: maxFileSize);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        byte[] fileData = memoryStream.ToArray();

        // Set up payloads, specifying the filetype as PDF
        var content = new MultipartFormDataContent();
        var fileContent = new ByteArrayContent(fileData);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/pdf");
        content.Add(fileContent, "file", selectedFile.Name);

        // Declare API URL
        string apiUrl = $"https://localhost:7139/api/Registration/Upload?userId={userId}";
        Console.WriteLine($"[Blazor] Sending message to: {apiUrl}");

        // Call API
        var response = await Http.PostAsync(apiUrl, content);

        Console.WriteLine($"[Blazor] Response Status: {response.StatusCode}");
        Console.WriteLine($"[Blazor] Response Content: {await response.Content.ReadAsStringAsync()}");

        if (response.IsSuccessStatusCode)
        {
            Console.WriteLine("[Blazor] File uploaded successfully");
            await LoadUsers();  // Refresh list
        }
        else
        {
            Console.WriteLine("[Blazor] File upload failed");
        }
    }
}
