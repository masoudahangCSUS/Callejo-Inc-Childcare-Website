@using Common.View
@inject AdminService AdminService
@rendermode InteractiveServer

<div>
    <h3>Users</h3>
    <button @onclick="() => AddUser()">ADD</button>
</div>

@if (users == null)
{
    <p>Loading data...</p>
}
else if (users.Count == 0)
{
    <p>No users found.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Address</th>
                <th>City</th>
                <th>ZIP</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Address</td>
                    <td>@user.City</td>
                    <td>@user.ZipCode</td>
                    <td>
                        <button @onclick = "() => EditUser(user)">Edit</button> 
                        <button @onclick = "() => DeleteUser(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<Modal Title="@GetModalTitle()" IsVisible="@isProfileModalVisible" OnClose="CloseProfileModal">
    <ProfileForm OnUserCreated="LoadUsers" OnSuccess="CloseProfileModal" Mode="@formMode" ExistingUser="@selectedUser" />
</Modal>

@code {
    private List<AdminUserCreationDTO> users;
    private bool isProfileModalVisible = false;
    private FormMode formMode;
    private AdminUserCreationDTO? selectedUser;

    private string GetModalTitle()
    {
        return formMode == FormMode.Create ? "Create Profile" : "Edit Profile";
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await AdminService.GetAllUsersAsync();
        StateHasChanged();
    }

    private void ShowProfileModal()
    {
        isProfileModalVisible = true;
    }

    private void CloseProfileModal()
    {
        isProfileModalVisible = false;
        selectedUser = null;
    }

    public async void EditUser(AdminUserCreationDTO user)
    {
        selectedUser = user;
        formMode = FormMode.Edit;
        ShowProfileModal();
    }

    public void AddUser()
    {
        selectedUser = null;
        formMode = FormMode.Create;
        ShowProfileModal();
    }

    public async Task DeleteUser(Guid userId)
    {
        var response = await AdminService.DeleteUserAsync(userId);
        if (response.IsSuccessStatusCode)
        {
            await LoadUsers();
        }
    }
}
