@page "/enrolled-children"
@using BlazorApp.Client.Services
@using Common.Models.Data
@using Common.View
@using Microsoft.AspNetCore.Authorization
@inject ProfileService profileService
@inject UserSessionService UserSession
@attribute [Authorize(Roles = "User")]
@rendermode InteractiveServer


@if (childList == null || !childList.Any())
{
    <div class="loading-message">
        <p>Loading notifications...</p>
    </div>
}
else
{
    @foreach (Child child in childList)
    {
        <div class="child-overview-section mb-4">
            <h1>Child Information Overview</h1>
            <div class="child-overview d-flex">
                <div class="child-photo-container me-3">
                    <img src="images/child-placeholder.png" alt="Child photo" class="child-photo" />
                </div>
                <div class="child-details">
                    <p><strong>First Name:</strong> @child.FirstName</p>
                    <p>
                        <strong>Middle Name:</strong>
                        @if (!string.IsNullOrWhiteSpace(child.MiddleName))
                        {
                            @child.MiddleName
                        }
                        else
                        {
                            <em>N/A</em>
                        }
                    </p>
                    <p><strong>Last Name:</strong> @child.LastName</p>
                    <p><strong>Age:</strong> @child.Age</p>
                </div>
            </div>
            <div class="mt-2">
                <button class="btn btn-secondary" @onclick="() => ToggleEdit(child.Id)">Edit</button>
            </div>



            @if (editingChildIds.Contains(child.Id))
            {
                <div class="card mt-3">
                    <div class="card-header">
                        Edit Child Information
                    </div>
                    <div class="card-body">
                        <EditForm Model="child" OnValidSubmit="() => HandleUpdateChild(child)">
                            <DataAnnotationsValidator />
                            <ValidationSummary />

                            <div class="form-group mb-2">
                                <label>First Name:</label>
                                <InputText id="@child.FirstName" class="form-control" @bind-Value="child.FirstName" />
                            </div>
                            <div class="form-group mb-2">
                                <label>Middle Name:</label>
                                <InputText id="@child.MiddleName" class="form-control" @bind-Value="child.MiddleName" />
                            </div>
                            <div class="form-group mb-2">
                                <label>Last Name:</label>
                                <InputText id= "@child.LastName" class="form-control" @bind-Value="child.LastName" />
                            </div>
                            <div class="form-group mb-2">
                                <label>Age:</label>
                                <InputNumber id="@child.Age" class="form-control" @bind-Value="child.Age" />
                            </div>
                            <div class="mt-3">
                                <button type="submit" class="btn btn-success">Save</button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="() => ToggleEdit(child.Id)">Cancel</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    }


}

@code {
    private List<Child> childList = new List<Child>();
    private HashSet<long> editingChildIds = new HashSet<long>();
    private ChildDTO updatedChild;


    protected override async Task OnInitializedAsync()
    {
        await LoadChildren();
    }

    async Task LoadChildren()
    {
        var childrenIds = await profileService.getChildrenAsync(UserSession.UserId);
        foreach (var childId in childrenIds)
        {
            var child = await profileService.GetChildById(childId);
            childList.Add(child);
        }
        Console.WriteLine("Loading Children");
    }

    void TestClick(){
        Console.WriteLine("Test Click");
    }
    void ToggleEdit(long childId)
    {
        Console.WriteLine("Stepping into ToggleEdit");
        if (editingChildIds.Contains(childId))
            editingChildIds.Remove(childId);
        else
            editingChildIds.Add(childId);

        StateHasChanged();

    }

    async Task HandleUpdateChild(Child child)
    {
        var updatedChild = new ChildDTO
        {
            Id = child.Id,
            FirstName = child.FirstName,
            MiddleName = child.MiddleName,
            LastName = child.LastName,
            Age = child.Age
        };
        bool updateResult = await profileService.updateChild(child.Id, updatedChild);
        if (updateResult)
            Console.WriteLine("Child updated succesfully");
        else
            Console.WriteLine("Child update failed");

        editingChildIds.Remove(child.Id);
    }
}

