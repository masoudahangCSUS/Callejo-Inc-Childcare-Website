@page "/SendRequest"
@using BlazorApp.Client.Services
@using Common.View
@using Common.Services.User
@inject NotificationService NotificationService
@inject UserSessionService UserSession
<!-- SendRequestDTO SendRequestStuff-->
@rendermode InteractiveServer

<h3>Send Notification</h3>
<br>
<br>

<div class="request-page">
    <div class="request-input-wrapper">
        <label for="parentID">Parent ID:</label>
        <input type="text" id="parentID" @bind="newRequest.FkParentId" disabled />

        <label for="requestTitle">Request Title:</label>
        <input type="text" id="requestTitle" @bind="newRequest.Title" />

        <label for="requestMessage">Request:</label>
        <textarea id="requestMessage" @bind="newRequest.Message"></textarea>
    </div>

    <div class="request-buttons">
        <button @onclick="HandleSubmit" class="rq-submit-btn" type="submit">Submit</button>
        <a href="/profile" class="rq-cancel-btn">Cancel</a>
    </div>
</div>

@code {
    private List<NotificationView> notifications = new();
    private bool? isSuccess;
    private bool isLoading = false;
    private NotificationView newRequest = new();
    private DateTime? newFormattedSentOn = null;

    private readonly IUserService _userService;

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(newRequest.Title) || string.IsNullOrWhiteSpace(newRequest.Message))
        {
            Console.WriteLine("Title and Message are required.");
            return;
        }

        newRequest.FkParentId = UserSession.UserId.Value;
        newRequest.SentOn = DateTime.UtcNow;
        newRequest.IsRead = false;

        try
        {
            var success = await NotificationService.SendCustomNotification(newRequest);

            if (success)
            {
                Console.WriteLine("Notification sent successfully.");
                newRequest = new NotificationView();
            }
            else
            {
                Console.WriteLine("Failed to send notification.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending notification: {ex.Message}");
        }
    }

    public class notificationModel
    {
        public string parentID { get; set; }
        public string Title { get; set; }
        public string Message { get; set; }
    }

    public class SendRequestDTO
    {
        public string rqTitle { get; set; } = string.Empty;
        public string rqMessage { get; set; } = string.Empty;
    }

    notificationModel notifyModel = new notificationModel();
}
