@page "/admin-schedule"
@using Common.View
@using Syncfusion.Blazor.Calendars
@using BlazorApp.Client.Services
@inject DailyScheduleService DailyScheduleService 

 @rendermode InteractiveServer

<h1 class="title">Daily Schedule</h1>

<div class="calendar-container">

    <SfCalendar TValue="DateTime?" @bind-Value="@SelectedDate">
        <CalendarEvents TValue="DateTime?" ValueChange="OnChange"></CalendarEvents>
    </SfCalendar>
    <div class="events-container" id="display-date">
        <span>Selected Day : @SelectedValue</span>
        <h3>Daily schedule on @SelectedValue</h3>

        <textarea type="text" @bind="newDailySchedule" class="form-control" rows="5" cols="50"></textarea>
        <br />

        <h3>Special Events</h3>
        <textarea type="text" @bind="specialEvents" class="form-control" rows="5" cols="50"></textarea>
        <br />
        <button @onclick="AddDailySchedule" class="btn btn-primary">Submit</button>
    </div>
</div>


@code {
    public DateTime? SelectedDate { get; set; } = DateTime.Now;
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");

    private string inputText = string.Empty;
    private string displayedText = string.Empty;
    private string inputTextSpecial = string.Empty;
    private string displayedTextSpecial = string.Empty;
    private long dailyScheduleIdCurrentlyBeingEdited;


    private Common.View.ListDailySchedule listDailySchedule;
    private Common.View.DailyScheduleView dailySchedule;
    private string newDailySchedule;
    private string specialEvents;

    private async Task AddDailySchedule()
    {
        Console.WriteLine($"Selected Date: {SelectedDate}");
        dailyScheduleIdCurrentlyBeingEdited = 0;

        DailyScheduleView dailyScheduleInfo = new DailyScheduleView
            {
                Description = newDailySchedule,
                CreatedAt = SelectedDate,
                Desc_special = specialEvents
            };
        var response = await DailyScheduleService.InsertDailySchedule(dailyScheduleInfo);

        if (response.Success)
        {
            newDailySchedule = string.Empty;
            specialEvents = string.Empty;
            SelectedDate = DateTime.Now;
            displayedText = inputText;
        }
    }


    private void OnChange(ChangedEventArgs<DateTime?> args)
    {
        if (args.Value.Value.Month == SelectedDate.Value.Month && args.Value.Value.Day == SelectedDate.Value.Day && args.Value.Value.Year == SelectedDate.Value.Year)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
            //listDailySchedule = await DailyScheduleService.GetDailySchedule(dailyScheduleId);
        }
        // SelectedDate = args.Value;
        // StateHasChanged();
    }
}