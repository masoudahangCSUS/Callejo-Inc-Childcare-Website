@page "/admin-schedule"
@using Syncfusion.Blazor.Calendars
@using BlazorApp.Client.Services
@inject DailyScheduleService DailyScheduleService

 @rendermode InteractiveServer

<h1 class="title">Daily Schedule</h1>

<div class="calendar-container">

    <SfCalendar TValue="DateTime?" @bind-Value="@SelectedDate">
        <CalendarEvents TValue="DateTime?" ValueChange="OnChange"></CalendarEvents>
    </SfCalendar>
    <div class="events-container" id="display-date">
        <span>Selected Day : @SelectedValue</span>
        <h3>Daily schedule on @SelectedValue</h3>
        <input type="text" @bind="newDailySchedule" placeholder="Enter the schedule" />
        <button @onclick="AddDailySchedule">Add Role</button>

        @* <textarea @bind="inputText" class="form-control" rows="5" cols="50"></textarea>
        <br />
        <button @onclick="AddDailySchedule" class="btn btn-primary">Submit</button> *@

        <p>You entered:</p>
        @if (!string.IsNullOrEmpty(displayedText))
        {
            <pre>@displayedText</pre>
        }

        <h3>Special Events</h3>
        @*<textarea @bind="inputTextSpecial" class="form-control" rows="5" cols="50"></textarea>
        <br />
                 <button @onclick="ShowTextSpecial" class="btn btn-primary">Submit</button>
 *@
        <p>You entered:</p>
        @if (!string.IsNullOrEmpty(displayedTextSpecial))
        {
            <pre>@displayedTextSpecial</pre>
        }
    </div>
</div>


@code {
    public DateTime? SelectedDate { get; set; }
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;
    public int CurrentMonth = 0;
    public int CurrentDay = 0;
    public int CurrentYear = 0;

    private string inputText = string.Empty;
    private string displayedText = string.Empty;
    private string inputTextSpecial = string.Empty;
    private string displayedTextSpecial = string.Empty;
    private int dailyScheduleId;

    private Common.View.ListDailySchedule listDailySchedule;
    private Common.View.DailyScheduleView dailySchedule;
    private string newDailySchedule;

    /*private async Task GetRoleById()
    {
        roleInfo = string.Empty;
        listRoles = await RoleService.GetRole(roleId);

        foreach (var role in listRoles.roles)
        {
            roleInfo += @"<br/><br/><b>Role Description</b>: " + role.Description + "<br/><br/><br/>";
        }
    }*/


    private async Task AddDailySchedule()
    {
        CurrentMonth = CurrentDate.Value.Month;
        CurrentDay = CurrentDate.Value.Day;
        CurrentYear = CurrentDate.Value.Year;

        var dailyScheduleInfo = new Common.View.DailyScheduleView { Description = newDailySchedule };
        var response = await DailyScheduleService.InsertDailySchedule(dailyScheduleInfo);

        if(response.Success)
        {
            //listDailySchedule = await DailyScheduleService.GetAllDailySchedules;
            newDailySchedule = string.Empty;
            displayedText = inputText;
        }
    }
    private void AddSpeicalEventsDescription()
    {
        displayedTextSpecial = inputTextSpecial;
    }

    private async Task OnChange(ChangedEventArgs<DateTime?> args)
    {
        var Count = 0;
        var dailyScheduleInfo = string.Empty;
        CurrentMonth = CurrentDate.Value.Month;
        CurrentDay = CurrentDate.Value.Day;
        CurrentYear = CurrentDate.Value.Year;

        //listDailySchedule = await DailyScheduleService.GetDailySchedule(dailyScheduleId);

        if (args.Value.Value.Month == CurrentMonth && (args.Value.Value.Day == 7 || args.Value.Value.Day == 14 || args.Value.Value.Day == 24 || args.Value.Value.Day == 29))
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Personal appointment)";
            Count++;
        }
        if (Count == 0)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
        }
    }
}