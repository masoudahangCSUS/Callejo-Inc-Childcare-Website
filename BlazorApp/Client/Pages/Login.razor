@page "/login"

@using BlazorApp.Server.Models
@using Microsoft.AspNetCore.Mvc
@rendermode InteractiveServer
@inject UserSessionService UserSession
@inject NavigationManager Navigation
<PageTitle>LoginPage</PageTitle>
@inject IJSRuntime JS

@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations

<PageTitle>Login</PageTitle>

<div class="login-page">
    <div class="login-box">
        <h1>CALLEJO INC.</h1>
        <div class="login-form">
            <EditForm Model="loginInfo" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="input-header">Email Address</div>
                <div class="input-wrapper">
                    <i class="fa fa-user"></i>
                    <InputText @bind-Value="loginInfo.Email" placeholder="Email" />
                </div>

                <div class="input-header">Password</div>
                <div class="input-wrapper">
                    <i class="fa fa-lock"></i>
                    <InputText @bind-Value="loginInfo.Password" type="password" placeholder="Password" />

                </div>

                <button class="login-btn" type="submit">LOGIN</button>
            </EditForm>
            @if (!loginState)
            {
                <p>@errorMessage</p>
            }
        </div>
    </div>
</div>

@code {
    private LoginDTO loginInfo = new LoginDTO();
    private bool loginState = true;
    private string errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/admin/login", loginInfo);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<APIResponse>();
                if (result?.Success == true)
                {
                    Navigation.NavigateTo("/admin"); // Redirect after successful login
                }
            }
            else
            {
                loginState = false;
                var error = await response.Content.ReadFromJsonAsync<APIResponse>();
                errorMessage = error?.Message ?? "Login failed.";
            }
        }
        catch (Exception ex) // Exception usually occurs if backend is not running
        {
            loginState = false;
            errorMessage = "An error occurred. Please try again.";
            Console.WriteLine(ex.Message); // Log error for debugging
        }
    }

    public class LoginDTO
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }

    public class APIResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public object? Data { get; set; }
    }
}



