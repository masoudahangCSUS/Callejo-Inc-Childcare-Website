@page "/adminphotos"
@inject HttpClient Http
@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using System.Text.Json
@using Common.View
@using System.Data.SqlClient
@using Microsoft.Data.SqlClient
@using System.Text.Json.Serialization;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer
@inject IJSRuntime JS

<h3>Admin Photo Management</h3>

<InputFile OnChange="HandleFileSelected" />
<button @onclick="UploadFile" disabled="@(!isFileSelected)">Upload Image</button>

<h4>Uploaded Images</h4>

<div class="filter-container">
    <label>Show:</label>
    <select @onchange="OnFilterChanged">
        <option value="All">All</option>
        <option value="Featured">Featured</option>
    </select>
</div>

@if (uploadedImages.Any())
{
    <div class="admin-photo-grid">
        @foreach (var img in uploadedImages)
        {
            <div class="photo-item" @onclick="() => ToggleSelection(img.FileName)">
                <input type="checkbox" class="checkbox-overlay" checked="@IsSelected(img.FileName)" />
                <img src="https://localhost:7139/images/photos/@img.FileName" />
            </div>
        }

    </div>

    <button class="publish-button" @onclick="PublishSelectedImages">Publish Featured</button>
}
else
{
    <p>No uploaded images found.</p>
}


@code {
    IBrowserFile selectedFile;
    bool isFileSelected = false;

    List<Image> uploadedImages = new();
    HashSet<string> selectedImages = new();
    string filterOption = "All";

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        isFileSelected = selectedFile != null;
    }

    private async Task UploadFile()
    {
        if (selectedFile == null)
        {
            await JS.InvokeVoidAsync("alert", "Please select a file first.");
            return;
        }

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(10_000_000));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("https://localhost:7139/api/admin/upload-photo", content);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Upload successful!");
                await LoadImages();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", $"Upload failed: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Upload error: {ex.Message}");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadImages();
    }

    private async Task LoadImages()
    {
        try
        {
            string apiUrl = filterOption == "Featured"
                ? "https://localhost:7139/api/photos/featured"
                : "https://localhost:7139/api/admin/get-all-photos";

            uploadedImages = await Http.GetFromJsonAsync<List<Image>>(apiUrl) ?? new();

            selectedImages = uploadedImages
                .Where(img => img.IsPublished)
                .Select(img => img.FileName)
                .ToHashSet();
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading images: {ex.Message}");
        }
    }



    private void ToggleSelection(string fileName)
    {
        if (selectedImages.Contains(fileName))
            selectedImages.Remove(fileName);
        else
            selectedImages.Add(fileName);
    }

    private async Task PublishSelectedImages()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7139/api/admin/publish-images", selectedImages.ToList());

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Featured images updated!");
                selectedImages.Clear();
                await LoadImages();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Failed to update featured images.!");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
    }

    private async Task OnFilterChanged(ChangeEventArgs e)
    {
        filterOption = e.Value?.ToString() ?? "All";
        await LoadImages();
    }

    private bool IsSelected(string fileName) => selectedImages.Contains(fileName);
}