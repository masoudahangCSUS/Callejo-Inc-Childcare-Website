@page "/admin-expenses"
@using Microsoft.AspNetCore.Authorization
@using Common.View
@using Common.Services.Expenses
@using System.Globalization
@inject IExpenseService ExpenseService
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<div class="expenses-page">
    <h2>Expenses Overview</h2>

    <!-- Summary Section with Editable Inputs and Confirm Buttons -->
    <div class="summary-section">
        <div class="summary-card">
            <h3>Total Profit</h3>
            <input type="text" class="summary-input" @bind="FormattedProfit" readonly />
            <button class="confirm-btn" @onclick="TotalProfit">✔</button>
        </div>
        <div class="summary-card">
            <h3>Total Revenue</h3>
            <input type="text" id="operating-costs" class="summary-input" @bind="formattedRevenue" readonly />
            <button class="confirm-btn" onclick="confirmInput('operating-costs')">✔</button>
        </div>
        <div class="summary-card">
            <h3>Total Expenses</h3>
            <input type="text" id="total-expenses" class="summary-input" @bind="FormattedTotalExpenses" readonly>
            <button class="confirm-btn" @onclick="LoadTotalExpenses">✔</button>
        </div>
    </div>

    <!-- Button to add new expense -->
    <div class="d-flex justify-content-end mb-3">
        <button class="modal-btn" @onclick="ShowExpenseModal">
            + New Expense
        </button>
    </div>

    <!-- Detailed Expenses Section -->
    <div class="details-section">
        <h3>Detailed Expense Breakdown</h3>
        <table class="expense-table">
            <thead>
                <tr>
                    <th>Category</th>
                    <th>Amount</th>
                    <th>Date</th>
                    <th>Notes</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Marketing</td>
                    <td>
                        <input type="text" id="amount-marketing" class="expense-amount" value="$0.00">
                        <button class="confirm-btn" onclick="confirmInput('amount-marketing')">✔</button>
                    </td>
                    <td>01/01/2024</td>
                    <td><input type="text" class="expense-notes" placeholder="Enter notes here">
                    <button class="confirm-btn" onclick="confirmInput('expense-notes')">✔</button>
                    </td>
                </tr>
                <tr>
                    <td>Utilities</td>
                    <td>
                        <input type="text" id="amount-utilities" class="expense-amount" value="$0.00">
                        <button class="confirm-btn" onclick="confirmInput('amount-utilities')">✔</button>
                    </td>
                    <td>01/01/2024</td>
                    <td><input type="text" class="expense-notes" placeholder="Enter notes here">
                    <button class="confirm-btn" onclick="confirmInput('expense-notes2')">✔</button>
                    </td>
                </tr>
                <tr>
                    <td>Employee Salaries</td>
                    <td>
                        <input type="text" id="amount-salaries" class="expense-amount" value="$0.00">
                        <button class="confirm-btn" onclick="confirmInput('amount-salaries')">✔</button>
                    </td>
                    <td>01/01/2024</td>
                    <td><input type="text" class="expense-notes" placeholder="Enter notes here">
                        <button class="confirm-btn" onclick="confirmInput('expense-notes')">✔</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Expenses Analysis Section -->
    <div class="charts-section">
        <h3>Expenses Analysis</h3>
        <p>Use the inputs above to update expense details.</p>
    </div>

    <!-- Add Expense Modal -->
    @if (IsExpenseModalOpen)
    {
        <div class="modal">
            <div class="modal-content">
                <h4>New Expense Entry</h4>

                <label>Amount:</label>
                <input type="number" @bind="newExpense.Amount" />

                <label>Date:</label>
                <input type="date" @bind="newExpense.Date" />

                <label>Category</label>
                <select @bind="newExpense.Category">
                    <option value="Groceries">Groceries</option>
                    <option value="Supplies">Supplies</option>
                    <option value="Other">Other</option>
                </select>

                <label>Notes</label>
                <textarea @bind="newExpense.Note"></textarea>

                <label>Receipt</label>
                <InputFile OnChange="@HandleFileSelected" />

                <div class="modal-actions">
                    <button class="save-btn" @onclick="SubmitExpense">Save</button>
                    <button class="cancel-btn" @onclick="CloseExpenseModal">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    private bool IsExpenseModalOpen = false;
    private ExpenseDTO newExpense = new ExpenseDTO();
    private byte[]? ReceiptData;

    private void ShowExpenseModal()
    {
        // Pre-assign date and category values when opening modal
        newExpense.Date = DateOnly.FromDateTime(DateTime.UtcNow);
        newExpense.Category = "Groceries";
        IsExpenseModalOpen = true;
        StateHasChanged();
    }

    private void CloseExpenseModal()
    {
        IsExpenseModalOpen = false;
        newExpense = new ExpenseDTO(); // Reset form
        ReceiptData = null;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Confirm file is PDF
            if (file.ContentType != "application/pdf" && !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("[Blazor] Invalid file type. Only PDFs are allowed");
                return;
            }

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream);
            ReceiptData = memoryStream.ToArray();
        }
    }

    private async Task SubmitExpense()
    {
        // File must be present when creating expense
        if (ReceiptData == null)
        {
            Console.WriteLine("[Blazor] No file selected");
            return;
        }

        // Amount must be positive
        if (newExpense.Amount <= 0)
        {
            Console.WriteLine("[Blazor] Positive amounts only");
            return;
        }

        // Assign ReceiptData to the receipt variable in the DTO, then create expense entry in DB
        newExpense.Receipt = ReceiptData;
        var createdExpense = await ExpenseService.CreateExpenseAsync(newExpense);

        if (createdExpense != null)
        {
            Console.WriteLine("[Blazor] Expense uploaded successfully");
            newExpense = new ExpenseDTO(); // Reset form
            IsExpenseModalOpen = false;
        } else
        {
            Console.WriteLine("[Blazor] Failed to upload expense");
        }
    }

    private string formattedRevenue;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTotalRevenue();
        await LoadTotalExpenses(); 
        await TotalProfit();

    }

    private async Task UpdateTotalRevenue()
    {
        var totalRevenue = await ExpenseService.GetChildrenCountAsync();
        var revenue = totalRevenue * 1000;
        formattedRevenue = $"${revenue:N2}";
    }

    private string FormattedTotalExpenses;
    private string FormattedProfit;

    private async Task LoadTotalExpenses()
    {
        var total = await ExpenseService.GetTotalExpensesAsync();
        FormattedTotalExpenses = $"${total:N2}";

    }

    private async Task TotalProfit()
    {
        // Remove currency symbols and commas for parsing
        var revenueValue = decimal.Parse(formattedRevenue.Replace("$", "").Replace(",", ""));
        var expenseValue = decimal.Parse(FormattedTotalExpenses.Replace("$", "").Replace(",", ""));

        var profit = revenueValue - expenseValue;
        FormattedProfit = $"${profit:N2}";
    }
    }


}