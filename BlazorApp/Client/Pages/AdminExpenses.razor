@page "/admin-expenses"
@using Microsoft.AspNetCore.Authorization
@using Common.View
@using Common.Services.Expenses
@using System.Globalization
@inject IExpenseService ExpenseService
@inject IJSRuntime JS
@inject HttpClient Http
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

<div class="expenses-page">
    <h2>Expenses Overview</h2>

    <!-- Summary Section with Editable Inputs and Confirm Buttons -->
    <div class="summary-section">
        <div class="summary-card">
            <h3>Total Profit</h3>
            <p class="summary-value">@FormattedProfit</p>
        </div>
        <div class="summary-card">
            <h3>Total Revenue</h3>
            <p class="summary-value">@formattedRevenue</p>
        </div>
        <div class="summary-card">
            <h3>Total Expenses</h3>
            <p class="summary-value">@FormattedTotalExpenses</p>
        </div>
    </div>

    <!-- Button to add new expense -->
    <div class="d-flex justify-content-end mb-3">
        <button class="modal-btn" @onclick="ShowExpenseModal">
            Create Expense
        </button>
    </div>

    <!-- Grocery expenses -->
    <div class="details-section">
        <h3>Groceries</h3>
        <table class="expense-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Note</th>
                    <th>Receipt</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (GroceryExpenses.Count == 0)
                {
                    <tr>
                        <td colspan="4" style="text-align:center;">No grocery expenses available</td>
                    </tr>
                }
                @foreach (var expense in GroceryExpenses)
                {
                    <tr>
                        <td>@expense.Date.ToString("MM/dd/yyyy")</td>
                        <td>@expense.Amount.ToString("C")</td>
                        <td>@expense.Note</td>
                        <td>
                            <button class="action-button download" @onclick="() => DownloadReceipt(expense.Id)">Download</button>
                        </td>
                        <td>
                            <button class="action-button edit" @onclick="() => EditExpense(expense)">Edit</button>
                            <button class="action-button delete" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Supply expenses -->
    <div class="details-section">
        <h3>Supplies</h3>
        <table class="expense-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Note</th>
                    <th>Receipt</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (SupplyExpenses.Count == 0)
                {
                    <tr>
                        <td colspan="4" style="text-align:center;">No supply expenses available</td>
                    </tr>
                }
                @foreach (var expense in SupplyExpenses)
                {
                    <tr>
                        <td>@expense.Date.ToString("MM/dd/yyyy")</td>
                        <td>@expense.Amount.ToString("C")</td>
                        <td>@expense.Note</td>
                        <td>
                            <button class="action-button download" @onclick="() => DownloadReceipt(expense.Id)">Download</button>
                        </td>
                        <td>
                            <button class="action-button edit" @onclick="() => EditExpense(expense)">Edit</button>
                            <button class="action-button delete" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Other expenses -->
    <div class="details-section">
        <h3>Other</h3>
        <table class="expense-table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Note</th>
                    <th>Receipt</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (OtherExpenses.Count == 0)
                {
                    <tr>
                        <td colspan="4" style="text-align:center;">No other expenses available</td>
                    </tr>
                }
                @foreach (var expense in OtherExpenses)
                {
                    <tr>
                        <td>@expense.Date.ToString("MM/dd/yyyy")</td>
                        <td>@expense.Amount.ToString("C")</td>
                        <td>@expense.Note</td>
                        <td>
                            <button class="action-button download" @onclick="() => DownloadReceipt(expense.Id)">Download</button>
                        </td>
                        <td>
                            <button class="action-button edit" @onclick="() => EditExpense(expense)">Edit</button>
                            <button class="action-button delete" @onclick="() => DeleteExpense(expense.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Add Expense Modal -->
    @if (IsExpenseModalOpen)
    {
        <div class="modal">
            <div class="modal-content">
                <h4>New Expense Entry</h4>

                <label>Amount:</label>
                <input type="number" @bind="newExpense.Amount" />

                <label>Date:</label>
                <input type="date" @bind="newExpense.Date" />

                <label>Category</label>
                <select @bind="newExpense.Category">
                    <option value="Groceries">Groceries</option>
                    <option value="Supplies">Supplies</option>
                    <option value="Other">Other</option>
                </select>

                <label>Notes</label>
                <textarea @bind="newExpense.Note"></textarea>

                <label>Receipt</label>
                <InputFile OnChange="@HandleFileSelected" />

                <div class="modal-actions">
                    <button class="save-btn" @onclick="SubmitExpense">Save</button>
                    <button class="cancel-btn" @onclick="CloseExpenseModal">Cancel</button>
                </div>
            </div>
        </div>
    }
</div>

@code
{
    private bool IsExpenseModalOpen = false;
    private ExpenseDTO newExpense = new ExpenseDTO();
    private byte[]? ReceiptData;

    private bool IsEditing = false;
    private int? EditingExpenseId = null;

    // Lists for the tables
    private List<ExpenseDTO> GroceryExpenses = new();
    private List<ExpenseDTO> SupplyExpenses = new();
    private List<ExpenseDTO> OtherExpenses = new();

    private void ShowExpenseModal()
    {
        // Pre-assign date and category values when opening modal
        newExpense.Date = DateOnly.FromDateTime(DateTime.UtcNow);
        newExpense.Category = "Groceries";
        IsExpenseModalOpen = true;
        StateHasChanged();
    }

    private void CloseExpenseModal()
    {
        IsExpenseModalOpen = false;
        newExpense = new ExpenseDTO(); // Reset form
        ReceiptData = null;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            // Confirm file is PDF
            if (file.ContentType != "application/pdf" && !file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine("[Blazor] Invalid file type. Only PDFs are allowed");
                return;
            }

            using var memoryStream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).CopyToAsync(memoryStream);
            ReceiptData = memoryStream.ToArray();
        }
    }

    // Submit new expense entry
    private async Task SubmitExpense()
    {
        // File must be present when creating expense
        if (!IsEditing && ReceiptData == null)
        {
            Console.WriteLine("[Blazor] No file selected");
            return;
        }

        // Amount must be positive
        if (newExpense.Amount <= 0)
        {
            Console.WriteLine("[Blazor] Positive amounts only");
            return;
        }

        // Assign ReceiptData to the receipt variable in the DTO and definte success bool
        newExpense.Receipt ??= ReceiptData;
        bool success;

        if (IsEditing)
        {
            success = await ExpenseService.EditExpenseAsync(newExpense);
        }
        else
        {
            var createdExpense = await ExpenseService.CreateExpenseAsync(newExpense);
            success = createdExpense != null;
        }


        if (success)
        {
            // Close modal and refresh page
            Console.WriteLine("[Blazor] Expense uploaded successfully");
            newExpense = new ExpenseDTO();
            IsExpenseModalOpen = false;
            ReceiptData = null;
            IsEditing = false;
            EditingExpenseId = null;
            await LoadExpenseLists();
            await LoadTotalExpenses();
            await TotalProfit();
        }
        else
        {
            Console.WriteLine("[Blazor] Failed to upload expense");
        }
    }

    // Delete expense entry
    private async Task DeleteExpense(int id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this expense?" });
        if (!confirmed)
            return;

        var response = await ExpenseService.DeleteExpenseAsync(id);

        if (response)
        {
            Console.WriteLine($"[Blazor] Expense {id} deleted");
            await LoadExpenseLists();
            await LoadTotalExpenses();
            await TotalProfit();
        }
        else
        {
            Console.WriteLine($"[Blazor] Failed to delete expense {id}");
        }
    }

    // Download Receipt
    private bool isJsLoaded = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isJsLoaded)
        {
            await JS.InvokeVoidAsync("eval", @"
                window.customDownloadFile = (fileName, byteBase64, contentType) => {
                    try {
                        const byteCharacters = atob(byteBase64);
                        const byteNumbers = Array.from(byteCharacters, char => char.charCodeAt(0));
                        const byteArray = new Uint8Array(byteNumbers);
                        const blob = new Blob([byteArray], { type: contentType });
                        const link = document.createElement('a');
                        const url = URL.createObjectURL(blob);
                        link.href = url;
                        link.download = fileName;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        URL.revokeObjectURL(url);
                    } catch {
                        console.error('Error in customDownloadFile:', error);
                    }
                };
            ");
            isJsLoaded = true;
        }
    }


    private async Task DownloadReceipt(int id)
    {
        try
        {
            var fileData = await Http.GetByteArrayAsync($"api/Expense/Download Receipt?id={id}");
            var base64File = Convert.ToBase64String(fileData);
            var fileName = "receipt.pdf";
            
            await JS.InvokeVoidAsync("customDownloadFile", fileName, base64File);
        }

        catch (Exception ex)
        {
            Console.WriteLine($"[Blazor] Failed to download receipt for ID {id}: {ex.Message}");
        }
    }

    // Edit existing expense entry
    private async Task EditExpense(ExpenseDTO expense)
    {
        IsEditing = true;
        EditingExpenseId = expense.Id;

        newExpense = new ExpenseDTO
            {
                Id = expense.Id,
                Date = expense.Date,
                Category = expense.Category,
                Amount = expense.Amount,
                Note = expense.Note,
                Receipt = expense.Receipt
            };

        IsExpenseModalOpen = true;
    }

    private string formattedRevenue;

    protected override async Task OnInitializedAsync()
    {
        await UpdateTotalRevenue();
        await LoadTotalExpenses(); 
        await TotalProfit();
        await LoadExpenseLists();
    }

    // Load lists of expenses
    private async Task LoadExpenseLists()
    {
        var allExpenses = await ExpenseService.GetAllExpensesAsync();

        GroceryExpenses = allExpenses
            .Where(e => e.Category.Equals("Groceries", StringComparison.OrdinalIgnoreCase))
            .ToList();

        SupplyExpenses = allExpenses
            .Where(e => e.Category.Equals("Supplies", StringComparison.OrdinalIgnoreCase))
            .ToList();

        OtherExpenses = allExpenses
            .Where(e => e.Category.Equals("Other", StringComparison.OrdinalIgnoreCase))
            .ToList();

        StateHasChanged();
    }

    private async Task UpdateTotalRevenue()
    {
        var totalRevenue = await ExpenseService.GetChildrenCountAsync();
        var revenue = totalRevenue * 1000;
        formattedRevenue = $"${revenue:N2}";
    }

    private string FormattedTotalExpenses;
    private string FormattedProfit;

    private async Task LoadTotalExpenses()
    {
        var total = await ExpenseService.GetTotalExpensesAsync();
        FormattedTotalExpenses = $"${total:N2}";

    }

    private async Task TotalProfit()
    {
        // Remove currency symbols and commas for parsing
        var revenueValue = decimal.Parse(formattedRevenue.Replace("$", "").Replace(",", ""));
        var expenseValue = decimal.Parse(FormattedTotalExpenses.Replace("$", "").Replace(",", ""));

        var profit = revenueValue - expenseValue;
        FormattedProfit = $"${profit:N2}";
    }
}