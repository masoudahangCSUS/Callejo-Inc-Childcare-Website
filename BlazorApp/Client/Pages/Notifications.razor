@page "/notifications"
@using BlazorApp.Client.Services
@using Common.Models.Data
@inject NotificationService NotificationService
@inject UserSessionService UserSession
@rendermode InteractiveServer

<h1 class="notifications-title">Notifications</h1>

@if (notifications == null)
{
    <div class="loading-message">
        <p>Loading notifications...</p>
    </div>
}
else if (!notifications.Any())
{
    <div class="empty-message">
        <p>No notifications found.</p>
    </div>
}
else
{
    <div class="notifications-container">
        @foreach (var notification in notifications)
        {
            <div class="notification-card @(notification.IsRead ? "" : "unread")">
                <h3>@notification.Title</h3>
                <p>@notification.Message</p>
                <small>Sent on: @notification.SentOn.ToString("MMMM dd, yyyy hh:mm tt")</small>
                @if (!notification.IsRead)
                {
                    <button class="mark-read-btn" @onclick="() => MarkAsRead(notification.Id)">Mark as Read</button>
                }
                else
                {
                    <span class="read-indicator">Read</span>
                }
            </div>
        }
    </div>
}

@code {
    private List<Notification> notifications = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserSession.UserIsLoggedIn && UserSession.UserId.HasValue && UserSession.UserRole == 1)
            {
                Guid parentId = UserSession.UserId.Value;
                Console.WriteLine($"DEBUG: Fetching notifications for Parent ID: {parentId}");

                notifications = await NotificationService.GetNotificationsByParentId(parentId);

                Console.WriteLine($"DEBUG: Fetched {notifications.Count} notifications.");
            }
            else
            {
                Console.WriteLine("DEBUG: User is not logged in or UserId is missing.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error loading notifications → {ex.Message}");
        }
    }

    private async Task MarkAsRead(long id)
    {
        Console.WriteLine($"DEBUG: Marking notification {id} as read...");
        try
        {
            var success = await NotificationService.MarkAsRead(id);
            if (success)
            {
                var notification = notifications.FirstOrDefault(n => n.Id == id);
                if (notification != null)
                {
                    notification.IsRead = true;
                    StateHasChanged();
                }
                Console.WriteLine($"DEBUG: Notification {id} marked as read.");
            }
            else
            {
                Console.WriteLine($"DEBUG: Failed to mark notification {id} as read.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"DEBUG: Error marking notification as read → {ex.Message}");
        }
    }
}
