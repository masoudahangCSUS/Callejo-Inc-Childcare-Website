@page "/holidays-vacations"
@using BlazorApp.Client.Services
@using Common.View
@using Microsoft.AspNetCore.Authorization

@inject HolidaysVacationsService HolidaysVacationsService
@inject UserSessionService UserSession
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User")]

<h1 class="page-title">Observed Holidays & Childcare Vacations</h1>

@*
When you are running the db scaffold command.  It updates files in the Common\models\data folder

Those files are auto generated by the scaffold command.

You should not touch anything under that folder because that is auto generated code.

Do not create classes under this folder.  Let the scaffold command do it.

Notification table does not define an IsExpanded field.  
We added the field to the database so the Scaffold command can add it to the class.  
Please review your code and correct as necessary.

If you get an error with the model file in your code.  
It's probably because you did not define the field properly in the database

We deleted the Notifications and HolidayVacations file added by the programmer ran the scaffold tool in order to regenerate the classes.  
Do not modify classes to correct error. Correct error at the database level,  Run the scaffold command again so corrected files will be added.

Scaffold tool is creating HolidayVacation vs HolidayVacations created by programmer. Use the one provided by scaffold tool

Programmer is using data model in common folder directly.  
This will not work and is actually not part of the architecture I outlined for you to follow.

You need to create a WebApi endpoint to data in HolidayVacations Table

If you are not trying to get data from database.  
Try creating the required data in a view.

- Sam

Let's meet and discuss this

*@

@*EC @if (holidaysVacations == null)
{
    <p class="loading-text">Loading...</p>
}
else if (!holidaysVacations.Any())
{
    <p class="no-holidays">No holidays or vacations found.</p>
}
else
{
    <div class="holidays-container">
        @foreach (var item in holidaysVacations)
        {
            <div class="holiday-card">
                <h3 class="holiday-title">@item.Title</h3>
                <p><strong>Type:</strong> @item.Type</p>
                <p><strong>Start Date:</strong> @item.StartDate.ToString("MMMM dd, yyyy")</p>
                <p><strong>End Date:</strong> @item.EndDate.ToString("MMMM dd, yyyy")</p>

                <button class="expand-btn" @onclick="() => ToggleDescription(item.Id)">
                    @(expandedHolidayId == item.Id ? "Hide Details" : "View Details")
                </button>

                @if (expandedHolidayId == item.Id)
                {
                    <div class="holiday-details">
                        <p><strong>Description:</strong> @(string.IsNullOrEmpty(item.Description) ? "No description available" : item.Description)</p>
                        <p><strong>Created At:</strong> @(item.CreatedAt.HasValue ? item.CreatedAt.Value.ToString("MMMM dd, yyyy HH:mm") : "N/A")</p>
                    </div>
                }
            </div>
        }
    </div>
} *@

@code {
    private List<HolidaysVacationView> holidaysVacations = new();
    private long? expandedHolidayId = null;

    protected override async Task OnInitializedAsync()
    {
        //EC holidaysVacations = await HolidaysVacationsService.GetHolidaysVacationsAsync();
    }

    private void ToggleDescription(long holidayId)
    {
        if (expandedHolidayId == holidayId)
            expandedHolidayId = null; // Collapse if already expanded
        else
            expandedHolidayId = holidayId; // Expand new item
    }
}
