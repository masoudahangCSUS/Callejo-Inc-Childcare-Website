@page "/holidays-vacations"
@using BlazorApp.Client.Services
@using Common.View
@using Microsoft.AspNetCore.Authorization

@inject HolidaysVacationsService HolidaysVacationsService
@inject UserSessionService UserSession
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User")]

<h1 class="page-title">Observed Holidays & Childcare Vacations</h1>

@if (holidaysVacations == null)
{
    <p class="loading-text">Loading...</p>
}
else if (!holidaysVacations.Any())
{
    <p class="no-holidays">No holidays or vacations found.</p>
}
else
{
    <div class="holidays-container">
        @foreach (var item in PagedHolidays)
        {
            <div class="holiday-card">
                <h3 class="holiday-title">@item.Title</h3>
                <p><strong>Type:</strong> @item.Type</p>
                <p><strong>Start Date:</strong> @item.StartDate.ToString("MMMM dd, yyyy")</p>
                <p><strong>End Date:</strong> @item.EndDate.ToString("MMMM dd, yyyy")</p>

                <button class="expand-btn" @onclick="() => ToggleDescription(item.Id)">
                    @(expandedHolidayId == item.Id ? "Hide Details" : "View Details")
                </button>

                @if (expandedHolidayId == item.Id)
                {
                    <div class="holiday-details">
                        <p><strong>Description:</strong> @(string.IsNullOrEmpty(item.Description) ? "No description available" : item.Description)</p>
                        <p><strong>Created At:</strong> @(item.CreatedAt.HasValue ? item.CreatedAt.Value.ToString("MMMM dd, yyyy HH:mm") : "N/A")</p>
                    </div>
                }
            </div>
        }

        <div class="pagination-wrapper">
            <p class="page-number">Page @currentPage of @Math.Ceiling((double)holidaysVacations.Count / pageSize)</p>
            <div class="pagination-controls">
                @if (currentPage > 1)
                {
                    <button @onclick="PreviousPage" class="pagination-btn">← Previous</button>
                }
                @if ((currentPage * pageSize) < holidaysVacations.Count)
                {
                    <button @onclick="NextPage" class="pagination-btn">Next →</button>
                }
            </div>
        </div>
    </div>
}

@code {
    private List<HolidaysVacationView> holidaysVacations = new();
    private long? expandedHolidayId = null;

    private int currentPage = 1;
    private int pageSize = 4;

    protected override async Task OnInitializedAsync()
    {
        holidaysVacations = await HolidaysVacationsService.GetHolidaysVacationsAsync();
    }

    private void ToggleDescription(long holidayId)
    {
        if (expandedHolidayId == holidayId)
            expandedHolidayId = null;
        else
            expandedHolidayId = holidayId;
    }

    private IEnumerable<HolidaysVacationView> PagedHolidays =>
        holidaysVacations
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    private void NextPage()
    {
        if ((currentPage * pageSize) < holidaysVacations.Count)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }
}
