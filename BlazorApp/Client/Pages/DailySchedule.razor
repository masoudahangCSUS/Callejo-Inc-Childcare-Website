@page "/schedule"
@rendermode InteractiveServer
@using BlazorApp.Client.Services
@using Common.View
@using Microsoft.AspNetCore.Authorization

@inject DailyScheduleService DailyScheduleService
@inject UserSessionService UserSession
@attribute [Authorize(Roles = "User")]

<h1 class="title">Daily Schedule</h1>

<div class="calendar-container">
    <SfCalendar TValue="DateTime?" @bind-Value="@SelectedDate" Min="@DateTime.Today">
        <CalendarEvents TValue="DateTime?" ValueChange="OnChange"></CalendarEvents>
    </SfCalendar>
    <div class="events-container">
        <h3>@SelectedValue</h3>

        <p>@SelectedValueDesc</p>
        <span>Selected Day : @SelectedValue</span>
    </div>
</div>

@code {
    public DateTime? SelectedDate { get; set; }
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;
    public string SelectedValueDesc = string.Empty;

    private string inputText = string.Empty;
    private string displayedText = string.Empty;
    private string inputTextSpecial = string.Empty;
    private string displayedTextSpecial = string.Empty;

    private List<DailyScheduleView> dailySchedules = new();
    private Common.View.DailyScheduleView dailySchedule;

    /*protected override async Task OnInitializedAsync()
        {
        listRoles = await RoleService.GetAllRoles();
        BuildHtmlTable();
    }*/

    private void ShowText()
    {
        displayedText = inputText;
    }
    private void ShowTextSpecial()
    {
        displayedTextSpecial = inputTextSpecial;
    }

    public async Task OnChange(ChangedEventArgs<DateTime?> args)
    {
        var Count = 0;
        var SelectedMonth = SelectedDate.Value.Month;
        var SelectedDay = SelectedDate.Value.Day;
        var SelectedYear = SelectedDate.Value.Year;
        SelectedValueDesc = string.Empty;
        if (args.Value.Value.Month == SelectedMonth && args.Value.Value.Day == SelectedDay && args.Value.Value.Year == SelectedYear)
        {
            var response = await DailyScheduleService.GetDailyScheduleByDate(SelectedDate);
            this.SelectedValue = "Daily schedule on: " + this.SelectedDate?.ToString("M/d/yyyy");
            if (SelectedValueDesc == string.Empty)
            {
                this.SelectedValue = "Nothing planned on " + this.SelectedDate?.ToString("M/d/yyyy");
            }
            else
            {
                SelectedValueDesc = dailySchedule.Description;
            }
            Count++;
        }
    }
    
    /*public DateTime? DateValue { get; set; } = DateTime.Now;
    private DateTime selectedDate = DateTime.Today;
    private List<string> dailyRoster = new List<string>();
    private List<string> specialEvents = new List<string>();

    private void onChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        DateValue = args.Value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        LoadRosterForDate(selectedDate);
        LoadSpecialEventsForDate(selectedDate);
    }

    public void LoadRosterForDate(DateTime date)
    {
        // Dummy events for demonstration purposes
        dailyRoster = new List<string>
        {
            $"8:30 AM - 9:00 AM: Children are dropped off; playtime inside",
            $"9:00 AM - 9:30 AM: Breakfest ",
            $"11:00 AM - 12:00 PM: Playtime outside",
            $"12:00 PM - 12:30 PM: Lunch",
            $"12:30 PM - 2:30 PM: Nap time", 
            $"2:30 PM - 3:00 PM: Circle time",
            $"3:00 PM - 5:00 PM: Playtime inside until parents arrive"
        };
    }

    public void LoadSpecialEventsForDate(DateTime date)
    {
        // Dummy events for demonstration purposes
        specialEvents = new List<string>
        {
            $"Bring your parents to Childcare day! (6:00 PM)"
        };
    }

    private void OnDateChanged(DateTime? date, ChangedEventArgs<DateTime?> args)
    {
        if (date.HasValue)
        {
            selectedDate = date.Value;
            LoadRosterForDate(selectedDate);
        }
    }*/
}