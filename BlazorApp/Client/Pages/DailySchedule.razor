@page "/schedule"
@rendermode InteractiveServer
@using BlazorApp.Client.Services
@using Common.View
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc

@inject DailyScheduleService DailyScheduleService
@inject UserSessionService UserSession
@attribute [Authorize(Roles = "User")]

<h1 class="title">Daily Schedule</h1>

<div class="calendar-container">
    <SfCalendar TValue="DateTime?" @bind-Value="@SelectedDate" Min="@DateTime.Today">
        <CalendarEvents TValue="DateTime?" ValueChange="OnChange"></CalendarEvents>
    </SfCalendar>
    <div class="events-container">
        <h3>Daily Schedule on @SelectedValue</h3>
        <p>@emptyMessage</p>
        <ul>
            @foreach (var item in lines)
            {
                <li>@item</li>
            }
        </ul>

        <h3>Special Events</h3>
        <p>@SelectedValueDescSpecial</p>
        <p>@emptyMessageSpecial</p>
        <span>Selected Day : @SelectedValue</span>
    </div>
</div>

@code {
    public DateTime? SelectedDate { get; set; }
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;
    public string SelectedValueDesc = string.Empty;
    public string SelectedValueDescSpecial = string.Empty;
    private string[] lines = Array.Empty<string>();
    public string emptyMessage = string.Empty;
    public string emptyMessageSpecial = string.Empty;


    private List<DailyScheduleView> dailySchedules = new();
    private Common.View.DailyScheduleView dailySchedule;


    public async Task OnChange(ChangedEventArgs<DateTime?> args)
    {
        var Count = 0;
        var SelectedMonth = SelectedDate.Value.Month;
        var SelectedDay = SelectedDate.Value.Day;
        var SelectedYear = SelectedDate.Value.Year;
        SelectedValueDesc = string.Empty;
        emptyMessage = "Nothing planned on " + this.SelectedDate?.ToString("M/d/yyyy");
        emptyMessageSpecial = "No special events planned";
        this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
        lines = Array.Empty<string>();
        SelectedValueDescSpecial = string.Empty;

        if (args.Value.Value.Month == SelectedMonth && args.Value.Value.Day == SelectedDay && args.Value.Value.Year == SelectedYear)
        {
            ListDailySchedule response = await DailyScheduleService.GetDailyScheduleByDate(SelectedDate.Value);
            //this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
            lines = Array.Empty<string>();
            SelectedValueDescSpecial = string.Empty;

            if(SelectedDate != null)
            {
                emptyMessage = string.Empty;
                emptyMessageSpecial = string.Empty;                
                if (response.Success == true && response.dailySchedules[0].Description != null)
                {
                    SelectedValueDesc = response.dailySchedules[0].Description;
                    lines = SelectedValueDesc.Split('\n');

                    if (response.dailySchedules[0].Desc_special != null)
                    {
                        SelectedValueDescSpecial = response.dailySchedules[0].Desc_special;
                    }
                    else
                    {
                        SelectedValueDescSpecial = "No special events planned";
                    }
                }
                else
                {
                    emptyMessage = "Nothing planned on " + this.SelectedDate?.ToString("M/d/yyyy");
                    SelectedValueDescSpecial = "No special events planned";
                }
                Count++;
            }
        }
    }
}