@page "/schedule"
@rendermode InteractiveServer
@using BlazorApp.Client.Services
<h1 class="title">Daily Schedule</h1>

<div class="calendar-container">
@*     <SfCalendar TValue="DateTime" @bind-Value="selectedDate" Min="@DateTime.Today"></SfCalendar>*@
    <SfCalendar TValue="DateTime?" @bind-Value="@SelectedDate" Min="@DateTime.Today">
        <CalendarEvents TValue="DateTime?" ValueChange="OnChange"></CalendarEvents>
    </SfCalendar>
    <div class="events-container">
        <h3>Daily schedule on @SelectedDate</h3>
        <span>Selected Day : @SelectedValue</span>
        @* <ul>
            @foreach (var eventItem in dailyRoster)
            {
                <li>@eventItem</li>
            }
        </ul>
        <h3>Special Events</h3>
        <ul>
            @foreach (var eventItem in specialEvents)
            {
                <li>@eventItem</li>
            }
        </ul> *@
    </div>
</div>

@code {
    public DateTime? SelectedDate { get; set; }
    public string SelectedValue { get; set; } = DateTime.Now.ToString("M/d/yyyy");
    public DateTime? CurrentDate { get; set; } = DateTime.Now;

    private string inputText = string.Empty;
    private string displayedText = string.Empty;
    private string inputTextSpecial = string.Empty;
    private string displayedTextSpecial = string.Empty;

    /*protected override async Task OnInitializedAsync()
    {
        listRoles = await RoleService.GetAllRoles();
        BuildHtmlTable();
    }*/

    private void ShowText()
    {
        displayedText = inputText;
    }
    private void ShowTextSpecial()
    {
        displayedTextSpecial = inputTextSpecial;
    }

    public void OnChange(ChangedEventArgs<DateTime?> args)
    {
        var Count = 0;
        var CurrentMonth = CurrentDate.Value.Month;
        var CurrentDay = CurrentDate.Value.Day;
        var CurrentYear = CurrentDate.Value.Year;
        if (args.Value.Value.Month == CurrentMonth && args.Value.Value.Day == CurrentDay && args.Value.Value.Year == CurrentYear)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Personal appointment)";
            Count++;
        }
        if (args.Value.Value.Month == CurrentMonth && (args.Value.Value.Day == 3 || args.Value.Value.Day == 11 || args.Value.Value.Day == 17 || args.Value.Value.Day == 22))
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy") + " (Official appointment)";
            Count++;
        }
        if (Count == 0)
        {
            this.SelectedValue = this.SelectedDate?.ToString("M/d/yyyy");
        }
        //args.Value.Value.Year = 2024;
    }
    
    /*public DateTime? DateValue { get; set; } = DateTime.Now;
    private DateTime selectedDate = DateTime.Today;
    private List<string> dailyRoster = new List<string>();
    private List<string> specialEvents = new List<string>();

    private void onChange(Syncfusion.Blazor.Calendars.ChangedEventArgs<DateTime?> args)
    {
        DateValue = args.Value;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        LoadRosterForDate(selectedDate);
        LoadSpecialEventsForDate(selectedDate);
    }

    public void LoadRosterForDate(DateTime date)
    {
        // Dummy events for demonstration purposes
        dailyRoster = new List<string>
        {
            $"8:30 AM - 9:00 AM: Children are dropped off; playtime inside",
            $"9:00 AM - 9:30 AM: Breakfest ",
            $"11:00 AM - 12:00 PM: Playtime outside",
            $"12:00 PM - 12:30 PM: Lunch",
            $"12:30 PM - 2:30 PM: Nap time", 
            $"2:30 PM - 3:00 PM: Circle time",
            $"3:00 PM - 5:00 PM: Playtime inside until parents arrive"
        };
    }

    public void LoadSpecialEventsForDate(DateTime date)
    {
        // Dummy events for demonstration purposes
        specialEvents = new List<string>
        {
            $"Bring your parents to Childcare day! (6:00 PM)"
        };
    }

    private void OnDateChanged(DateTime? date, ChangedEventArgs<DateTime?> args)
    {
        if (date.HasValue)
        {
            selectedDate = date.Value;
            LoadRosterForDate(selectedDate);
        }
    }*/
}